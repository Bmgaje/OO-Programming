/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dataaccesslayer;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import transferobjects.CourseDTO;
import transferobjects.CredentialsDTO;

/**
 * this is Course Dao Implimation class
 * In this Class we can create methods for add update and delete
 * @author Brijesh4205
 * @since 19/11/2022
 * @version 1.0
 */
public class CoursesDaoImpl implements CoursesDao{
    
    private final CredentialsDTO creds;
    
    public CoursesDaoImpl(CredentialsDTO creds){
        this.creds = creds;
    }
    
    @Override
    public List<CourseDTO> getAllCourses(){
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList<CourseDTO> courses = null;
        
        try{
            
            DataSource ds = new DataSource(creds);
            con = ds.createConnection();
            pstmt = con.prepareStatement("SELECT CourseCode, CourseName, CourseDescription FROM course ORDER BY CourseCode");
            rs= pstmt.executeQuery();
            courses = new ArrayList<CourseDTO>();
            
            while(rs.next()){
                CourseDTO course = new CourseDTO();
                course.setCourseCode(rs.getString("CourseCode"));
		course.setCourseName(rs.getString("CourseName"));
		course.setCourseDescription(rs.getString("CourseDescription"));
                courses.add(course);
            }
        }               
    
        catch(SQLException ex){
            ex.printStackTrace();
        }
        finally{
            try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
        }
        
        return courses;
    }
    
    @Override
	public CourseDTO getCourseByCourseCode(String CourseCode) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		CourseDTO course = null;
		try{
			DataSource ds = new DataSource(creds);
			con = ds.createConnection();
			pstmt = con.prepareStatement(
			"SELECT \"CourseCode\", \"CourseName\", \"CourseDescription\" FROM \"course\" WHERE \"CourseCode\" = ?");
			pstmt.setString(1, CourseCode);                        
			rs = pstmt.executeQuery();
			while(rs.next()){
				course = new CourseDTO();
				course.setCourseCode(rs.getString("CourseCode"));
				course.setCourseName(rs.getString("CoursetName"));
				course.setCourseDescription(rs.getString("CourseDescription"));
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return course;
	}

	@Override
	public void addCourse(CourseDTO course) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource(creds);
			con = ds.createConnection();
			// do not insert AuthorID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO \"course\" (\"CourseName\", \"CourseDescription\") " +
			        "VALUES(?, ?)");
			pstmt.setString(1, course.getCourseName());
			pstmt.setString(2, course.getCourseDescription());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}

	@Override
	public void updateCourse(CourseDTO course) {
			Connection con = null;
			PreparedStatement pstmt = null;
			try{
				DataSource ds = new DataSource(creds);
				con = ds.createConnection();
				pstmt = con.prepareStatement(
						"UPDATE \"course\" SET \"CourseName\" = ?, " + 
				        "\"CourseDescription\" = ? WHERE \"CourseCode\" = ?");
				pstmt.setString(1, course.getCourseName());
				pstmt.setString(2, course.getCourseDescription());	
				pstmt.setString(3, course.getCourseCode());
				pstmt.executeUpdate();
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			finally{
				try{ if(pstmt != null){ pstmt.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
				try{ if(con != null){ con.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
			}
	}

	@Override
	public void deleteCourse(CourseDTO course) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource(creds);
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM \"course\" WHERE \"CourseCode\" = ?");	
			pstmt.setString(1, course.getCourseCode());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
}